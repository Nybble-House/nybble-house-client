import { useEffect, useState } from 'react';
import { getColonyNetworkClient, Network} from '@colony/colony-js';
import { Wallet } from 'ethers';
import { JsonRpcProvider } from 'ethers/providers';


const useColony = () => {
    const [networkAddress, setNetworkAddress] = useState('');
    const [wallet, setWallet] = useState('');
    const [networkClient, setNetworkClient] = useState({});
    const [colonyClient, setColonyClient] = useState('');
    const [loadingComplete, setLoadingComplete] = useState(false)

    // Connect to Colony on Gnosis 
    // or other rpc with env vars, props etc. 
    setNetworkAddress('0x78163f593D1Fa151B4B7cacD146586aD2b686294');
    const url = 'https://rpc.gnosischain.com/'; 
    const provider = new JsonRpcProvider(url);
    

    useEffect(() => {
        const connect = async () => {
            try {
                const wallet = new Wallet(
                    // This is a private key that is generated by the colony network ganache instance
                    // wallet wrapper goes here,
                     '0x0355596cdb5e5242ad082c4fe3f8bbe48c9dba843fe1f99dd8272f487e70efae',
                     provider
                );
                const networkClient = await getColonyNetworkClient(
                    Network.Local,
                    wallet,
                    {networkAddress: networkAddress}
                );
                const colonyClient = await networkClient.getColonyClient(1);

                console.log('Wallet Address:', wallet.address);
                console.log('Network Address:', networkClient.address);
                console.log('Meta Colony address:', colonyClient.address);

                setWallet(wallet.address);
                setNetworkClient(networkClient);
                setColonyClient(colonyClient);
                
            } catch (error) {
                console.warn(error)
            } finally {
                setLoadingComplete(true);
            }
        }

        connect();
        
        return () => { loadingComplete };
        
    }, []);
}

export default useColony 